/*
 * WindowEventDemo.java
 *
 * Created on Apr 25, 2018, 5:33:17 PM
 */
package centrolControl;

import java.io.BufferedWriter;
import java.io.File;
import java.util.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.micromanager.MMStudio;
import org.micromanager.utils.MMException;
import org.micromanager.utils.MMScriptException;
import org.micromanager.api.PositionList;

/**
 * This is the UI and the master function, each button represents one module, or
 * one step in the sequencing experiment. 
 *
 * @author Donny Sun, Kitty Li
 */
public class WindowEventDemo extends javax.swing.JFrame {

    //Fluidic Control
    protected Fluidic experiment; //fluidic object will control the behavior of pump and valve selector
    protected Parser instr_set; //parser object will keep track of instruction files
    protected MMStudio gui_;
    private Preferences pref = Preferences.userRoot().node(getClass().getName());//keep track of the last used directory
    protected FileWriter fw = null;
    protected BufferedWriter bw = null;
    protected PrintWriter out = null;

    /** Creates new form WindowEventDemo */
    public WindowEventDemo() {
        experiment = new Fluidic(); //initialize a new experiment
        instr_set = new Parser(); //initialize a new parser that handles instructions
        gui_ = new MMStudio(false);
        initComponents(); //set up the UI elements

        Fluidic.showMessage("Please choose the intruction .txt file", "File Selection");
        String instructionListFile = fileChooser();
        instructionListFile = instructionListFile.replace("\\", "\\\\");
        instr_set.parseFile(instructionListFile);
        writeToLog("New Experiment", false); //create a log file
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnWash = new javax.swing.JButton();
        btnInjectBuffer = new javax.swing.JButton();
        btnCyc0 = new javax.swing.JButton();
        btnInvokeMM = new javax.swing.JButton();
        btnSequencing = new javax.swing.JButton();
        btnContinueCyc0 = new javax.swing.JButton();
        LabelNumOfCyc = new javax.swing.JLabel();
        jFormattedTextFieldOutput = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaOutput = new javax.swing.JTextArea();
        jLabelOutput = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnWash.setText("Wash");
        btnWash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWashActionPerformed(evt);
            }
        });

        btnInjectBuffer.setText("Inject Buffer");
        btnInjectBuffer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInjectBufferActionPerformed(evt);
            }
        });

        btnCyc0.setText("Cycle 0");
        btnCyc0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCyc0ActionPerformed(evt);
            }
        });

        btnInvokeMM.setText("Set FOVs");
        btnInvokeMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInvokeMMActionPerformed(evt);
            }
        });

        btnSequencing.setText("Run Sequencing");
        btnSequencing.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSequencingMouseClicked(evt);
            }
        });
        btnSequencing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSequencingActionPerformed(evt);
            }
        });

        btnContinueCyc0.setText("IM buffer");
        btnContinueCyc0.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnContinueCyc0MouseClicked(evt);
            }
        });
        btnContinueCyc0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContinueCyc0ActionPerformed(evt);
            }
        });

        LabelNumOfCyc.setText("Number Of Cycles");

        jFormattedTextFieldOutput.setText("1");
        jFormattedTextFieldOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextFieldOutputActionPerformed(evt);
            }
        });

        jTextAreaOutput.setColumns(20);
        jTextAreaOutput.setEditable(false);
        jTextAreaOutput.setLineWrap(true);
        jTextAreaOutput.setRows(5);
        jTextAreaOutput.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextAreaOutput);

        jLabelOutput.setText("Output");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnWash)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnInjectBuffer))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnCyc0)
                        .addGap(14, 14, 14)
                        .addComponent(btnInvokeMM)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnContinueCyc0))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelOutput)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSequencing)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jFormattedTextFieldOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LabelNumOfCyc)))
                .addGap(149, 149, 149))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnWash)
                    .addComponent(btnInjectBuffer))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCyc0)
                    .addComponent(btnInvokeMM)
                    .addComponent(btnContinueCyc0))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSequencing)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jFormattedTextFieldOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(LabelNumOfCyc)))
                .addGap(31, 31, 31)
                .addComponent(jLabelOutput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {LabelNumOfCyc, btnSequencing});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * update the output window with the progress of sequencing experiment
     *
     * @param inputs the text information will be updated
     */
    public void updateTextArea(final String inputs) {
        System.out.println(inputs);
        (new Thread() {

            @Override
            public void run() {
                try {
                    jTextAreaOutput.append(inputs + "\n");
                } catch (Exception exception) {
                    System.out.println("There was an error in the thread.");
                }
            }
        }).start();
    }

    /**
     * write the progress of sequencing experiment to log file
     * 
     * @param inputs the text information will be written to the log file
     * @param append the parameter to decide whether the the new information will be written to a new text file or be appended to the current one
     */
    public void writeToLog(final String inputs, boolean append) {
        try {
            DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
            Date date = new Date();
            fw = new FileWriter("X:\\Gu-microscope\\sequencing_log.txt", append);
            bw = new BufferedWriter(fw);
            out = new PrintWriter(bw);
            out.println();
            out.println(dateFormat.format(date));
            out.println(inputs);
            out.close();
        } catch (IOException e) {
            System.err.println(e);
        } finally {
            if (out != null) {
                out.close();
            }
            try {
                if (bw != null) {
                    bw.close();
                }
            } catch (IOException e) {
                System.err.println(e);
            }
            try {
                if (fw != null) {
                    fw.close();
                }
            } catch (IOException e) {
                System.err.println(e);
            }
        }
    }

    /**
     * perform the 'wash' operation
     * 
     * @param evt event trigger
     */
    private void btnWashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWashActionPerformed
        try {
            // TODO add your handling code here:
            // experiment.wash();
            updateTextArea("\nStart Washing!");
            writeToLog("\nStart Washing!", true);
            List<Instruction> washInstr = instr_set.getSectionInstructions("WASH");
            experiment.initiate();
            for (Instruction ins : washInstr) {
                if (ins.getName().equals("IMAGING")) {
                    continue;
                } else if (ins.isWaitUserInstruction()) {
                    experiment.showMessage("Wash is done.", "Wash");
                } else {
                    experiment.runInstruction(ins);
                    updateTextArea(ins.toString());
                    writeToLog(ins.toString(), true);
                }
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(WindowEventDemo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnWashActionPerformed

    /**
     * perform the 'inject buffer' operation
     *
     * @param evt event trigger
     */
    private void btnInjectBufferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInjectBufferActionPerformed
        try {
            // TODO add your handling code here:
            // experiment.injectBuffer();
            updateTextArea("\nStart Buffer Injection");
            writeToLog("\nStart Buffer Injection", true);
            List<Instruction> injectBufferInstr = instr_set.getSectionInstructions("BUFFER INJECTION");
            experiment.initiate();
            for (Instruction ins : injectBufferInstr) {
                if (ins.getName().equals("IMAGING")) {
                    continue;
                } else if (ins.isWaitUserInstruction()) {
                    experiment.showMessage("Buffer Injection is done.", "Message");
                } else {
                    experiment.runInstruction(ins);
                    updateTextArea(ins.toString());
                    writeToLog(ins.toString(), true);
                }
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(WindowEventDemo.class.getName()).log(Level.SEVERE, null, ex);
            //} catch (FileNotFoundException ex) {
            //    Logger.getLogger(WindowEventDemo.class.getName()).log(Level.SEVERE, null, ex);
            //} catch (IOException ex) {
            Logger.getLogger(WindowEventDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            System.out.println("There was an error.");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnInjectBufferActionPerformed

    /**
     * perform the 'incorp 0' operation
     * 
     * @param evt event trigger
     */
    private void btnCyc0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCyc0ActionPerformed
        try {
            // TODO add your handling code here:
            //experiment.startIncorp0();
            updateTextArea("\nStart Cycle 0");
            writeToLog("\nStart Cycle 0", true);
            List<Instruction> incorp0Instr = instr_set.getSectionInstructions("INCORP 0 START");
            experiment.initiate();
            for (Instruction ins : incorp0Instr) {
                if (ins.getName().equals("IMAGING")) {
                    experiment.showMessage("Please run MultiD acquisition manually", "Message");
                } else if (ins.isWaitUserInstruction()) {
                    experiment.showMessage("Please select FOV", "Message");
                    break;
                } else {
                    experiment.runInstruction(ins);
                    updateTextArea(ins.toString());
                    writeToLog(ins.toString(), true);
                }
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(WindowEventDemo.class.getName()).log(Level.SEVERE, null, ex);
            //} catch (FileNotFoundException ex) {
            //   Logger.getLogger(WindowEventDemo.class.getName()).log(Level.SEVERE, null, ex);
            //} catch (IOException ex) {
            Logger.getLogger(WindowEventDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            System.out.println("There was an error.");
        }
    }//GEN-LAST:event_btnCyc0ActionPerformed

    /**
     * open the acquisition control dialog of micro-manager
     *
     * @param evt
     */
    private void btnInvokeMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInvokeMMActionPerformed
        // TODO add your handling code here:
        //Imaging System Control

        //open Acquisition Control Dialog for cycle 0
        gui_.openAcqControlDialog();

    }//GEN-LAST:event_btnInvokeMMActionPerformed

    /**
     * Perform the automated sequencing operation
     *
     * @param evt mouse click on the 'start sequencing' button
     * @param pops out a window and ask user to choose the Multi-D configuration file
     * @param pops out a window and ask user to choose the FOV list file
     * @param pops out a window and ask user the directory to save the image files
     */
    private void btnSequencingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSequencingMouseClicked
        try {
            // reads the number of incorporation cycles from text field
            int numOfCyc = Integer.parseInt(jFormattedTextFieldOutput.getText());

            Fluidic.showMessage("Please choose the Multi-D configuration file", "File Selection");
            String acquisitionConfigFile = fileChooser();
            acquisitionConfigFile = acquisitionConfigFile.replace("\\", "\\\\");
            gui_.loadAcquisition(acquisitionConfigFile);


            PositionList positionList = gui_.getPositionList();
            Fluidic.showMessage("Please choose the position list file", "File Selection");
            String positionListFile = fileChooser();
            positionListFile = positionListFile.replace("\\", "\\\\");
            positionList.load(positionListFile);


            Fluidic.showMessage("Please choose where you want to save the images", "Save Directory");
            String saveDirectory = dirChooser();
            saveDirectory = saveDirectory.replace("\\", "\\\\");


            if (numOfCyc > 1) {
                for (int i = 0; i < numOfCyc; i++) {
                    updateTextArea("\nStart sequencing cycle " + i + 1);
                    writeToLog("\nStart sequencing cycle " + i + 1, true);
                    List<Instruction> incorpNInstr = instr_set.getSectionInstructions("INCORP N");
                    experiment.initiate();
                    for (Instruction ins : incorpNInstr) {
                        if (ins.getName().equals("IMAGING")) {
                            gui_.runAcquisition("Incorp", saveDirectory);
                        } else if (ins.isWaitUserInstruction()) {
                            continue;
                        } else {
                            experiment.runInstruction(ins);
                            updateTextArea(ins.toString());
                            writeToLog(ins.toString(), true);
                        }
                    }
                }
                // we have a else statement becuase perviously the last step of
                // sequencing has slightly different operation process.
            } else if (numOfCyc == 1) {

                List<Instruction> incorpNInstr = instr_set.getSectionInstructions("INCORP N");
                experiment.initiate();
                for (Instruction ins : incorpNInstr) {
                    if (ins.getName().equals("IMAGING")) {
                        gui_.runAcquisition("Incorp", saveDirectory);
                    } else if (ins.isWaitUserInstruction()) {
                        continue;
                    } else {
                        experiment.runInstruction(ins);
                        updateTextArea(ins.toString());
                        writeToLog(ins.toString(), true);
                    }
                }
            } else {
                throw new IllegalArgumentException("Cannot run negative number of incorporation cycles.");
            }
            // close and stop the image acuisition, elsewise the shutter will
            // kept on, sometimes so is the light source.
            gui_.closeSequence(true);
            gui_.closeAllAcquisitions();

        } catch (InterruptedException ex) {
            Logger.getLogger(WindowEventDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MMException ex) {
            Logger.getLogger(WindowEventDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MMScriptException ex) {
            Logger.getLogger(WindowEventDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            System.out.println("There was an error.");
        }
    }//GEN-LAST:event_btnSequencingMouseClicked

    private String fileChooser() {
        // Retrieve the selected path or use an empty string if no path has
        // previously been selected
        String path = pref.get("DEFAULT_PATH", "");

        JFileChooser chooser = new JFileChooser();
        // file type filter
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("position, xml and txt files", "xml", "pos", "txt");
        chooser.addChoosableFileFilter(fileFilter);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        // set the path that was saved in preferences
        chooser.setCurrentDirectory(new File(path));

        int returnVal = chooser.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = chooser.getSelectedFile();
            chooser.setCurrentDirectory(f);

            // Save the selected path
            pref.put("DEFAULT_PATH", f.getAbsolutePath());
            return f.getAbsolutePath();
        }
        return chooser.getSelectedFile().getAbsolutePath();
    }

    private String dirChooser() {
        // Retrieve the selected path or use an empty string if no path has
        // previously been selected
        String path = pref.get("DEFAULT_PATH", "");

        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        // set the path that was saved in preferences
        chooser.setCurrentDirectory(new File(path));

        int returnVal = chooser.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = chooser.getSelectedFile();
            chooser.setCurrentDirectory(f);

            // Save the selected path
            pref.put("DEFAULT_PATH", f.getAbsolutePath());
            return f.getAbsolutePath();
        }
        return chooser.getSelectedFile().getAbsolutePath();
    }

    private void btnSequencingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSequencingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSequencingActionPerformed

    /**
     * Perform Incorp 0 last step operation - add more Image Buffer
     *
     * @param evt mouse click trigger event
     */
    private void btnContinueCyc0MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnContinueCyc0MouseClicked
        try {
            List<Instruction> incorp0Instr = instr_set.getSectionInstructions("INCORP 0 END");
            experiment.initiate();
            for (Instruction ins : incorp0Instr) {
                if (ins.getName().equals("IMAGING")) {
                    experiment.showMessage("Please run Image MultiD Acquisition manually", "Message");
                } else if (ins.isWaitUserInstruction()) {
                    break;
                } else {
                    experiment.runInstruction(ins);
                    updateTextArea(ins.toString());
                    writeToLog(ins.toString(), true);
                }
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(WindowEventDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            System.out.println("There was an error in Incor0 last step.");
        }
    }//GEN-LAST:event_btnContinueCyc0MouseClicked

    private void jFormattedTextFieldOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextFieldOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFormattedTextFieldOutputActionPerformed

    private void btnContinueCyc0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContinueCyc0ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnContinueCyc0ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new WindowEventDemo().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabelNumOfCyc;
    private javax.swing.JButton btnContinueCyc0;
    private javax.swing.JButton btnCyc0;
    private javax.swing.JButton btnInjectBuffer;
    private javax.swing.JButton btnInvokeMM;
    private javax.swing.JButton btnSequencing;
    private javax.swing.JButton btnWash;
    private javax.swing.JFormattedTextField jFormattedTextFieldOutput;
    private javax.swing.JLabel jLabelOutput;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTextAreaOutput;
    // End of variables declaration//GEN-END:variables
}